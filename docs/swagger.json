{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample boilerplate api server.",
        "title": "Go Boilerplate API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.1"
    },
    "host": "localhost:80",
    "basePath": "/v1",
    "paths": {
        "/ping": {
            "get": {
                "description": "Get ping response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ping"
                ],
                "summary": "Get ping response",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ping.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "get user all objects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Insert an user object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Insert user",
                "parameters": [
                    {
                        "description": "Insert user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "get user object by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get an user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}/rating": {
            "get": {
                "description": "get user object with rating info by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get an user with rating info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ping.Response": {
            "type": "object",
            "properties": {
                "app": {
                    "type": "string"
                },
                "commitId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "user.Favourite": {
            "type": "object",
            "properties": {
                "beers": {
                    "description": "Beers come from a GRPC API",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "favourite": {
                    "$ref": "#/definitions/user.Favourite"
                },
                "id": {
                    "type": "string",
                    "example": "110"
                },
                "name": {
                    "type": "string",
                    "example": "Shourie Ganguly"
                },
                "stars": {
                    "description": "Stars come from an HTTP API",
                    "type": "string",
                    "example": "five"
                }
            }
        },
        "utils.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "MODULE.ERROR_CODE"
                },
                "description": {
                    "type": "string",
                    "example": "Error description"
                },
                "message": {
                    "description": "mainly used for frontend",
                    "type": "string",
                    "example": "Oops! Something went wrong"
                }
            }
        }
    }
}